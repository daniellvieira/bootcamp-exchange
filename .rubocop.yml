require:
  - rubocop-rspec
  - test_prof/rubocop
AllCops:
  Include:
    - '**/*.rb'
    - '**/*.arb'
    - '**/*.axlsx'
    - '**/*.builder'
    - '**/*.gemfile'
    - '**/*.gemspec'
    - '**/*.jbuilder'
    - '**/*.pluginspec'
    - '**/*.podspec'
    - '**/*.rabl'
    - '**/*.rake'
    - '**/*.rbuild'
    - '**/*.ru'
    - '**/*.ruby'
    - '**/*.spec'
    - '**/*.thor'
    - '**/*.watchr'
    - '**/.irbrc'
    - '**/.pryrc'
    - '**/buildfile'
    - '**/config.ru'
    - '**/Capfile'
    - '**/Gemfile'
    - '**/Guardfile'
    - '**/Rakefile'
    - '**/Thorfile'
  Exclude:
    - 'db/**/*'
    - 'config/**/*'
    - 'script/**/*'
    - 'node_modules/**/*'
    - 'vendor/**/*'
    - '.git/**/*'
    - !ruby/regexp /old_and_unused\.rb$/

################################################################################
# Layout #######################################################################
################################################################################

Layout/FirstArgumentIndentation:
  EnforcedStyle: special_for_inner_method_call_in_parentheses
  SupportedStyles:
    # The first parameter should always be indented one step more than the
    # preceding line.
    - consistent
    # The first parameter should always be indented one level relative to the
    # parent that is receiving the parameter
    - consistent_relative_to_receiver
    # The first parameter should normally be indented one step more than the
    # preceding line, but if it's a parameter for a method call that is itself
    # a parameter in a method call, then the inner parameter should be indented
    # relative to the inner method.
    - special_for_inner_method_call
    # Same as `special_for_inner_method_call` except that the special rule only
    # applies if the outer method call encloses its arguments in parentheses.
    - special_for_inner_method_call_in_parentheses
  # By default, the indentation width from `Layout/IndentationWidth` is used
  # But it can be overridden by setting this parameter
  IndentationWidth: ~

Layout/TrailingEmptyLines:
  Description: 'Checks trailing blank lines and final newline.'
  StyleGuide: '#newline-eof'
  Enabled: true
  EnforcedStyle: final_blank_line
  SupportedStyles:
    - final_newline
    - final_blank_line

Layout/LineLength:
  Max: 90
  # To make it possible to copy or click on URIs in the code, we allow lines
  # containing a URI to be longer than Max.
  AllowHeredoc: true
  AllowURI: true
  URISchemes:
    - http
    - https
  # The IgnoreCopDirectives option causes the LineLength rule to ignore cop
  # directives like '# rubocop: enable ...' when calculating a line's length.
  Exclude:
    - Gemfile
    - spec/**/*_spec.rb
  IgnoreCopDirectives: false
  # The IgnoredPatterns option is a list of !ruby/regexp and/or string
  # elements. Strings will be converted to Regexp objects. A line that matches
  # any regular expression listed in this option will be ignored by LineLength.
  IgnoredPatterns: []

Layout/SpaceAroundMethodCallOperator:
  Enabled: true

################################################################################
# Lint #########################################################################
################################################################################

Lint/RaiseException:
  Enabled: true

Lint/StructNewOverride:
  Enabled: true

Naming/RescuedExceptionsVariableName:
  PreferredName: exception

################################################################################
# Metrics ######################################################################
################################################################################

Metrics/BlockLength:
  CountComments: false  # count full line comments?
  Max: 25
  ExcludedMethods: []
  Exclude:
    - spec/**/*_spec.rb
    - spec/factories/**/*.rb

Metrics/MethodLength:
  Description: 'Avoid methods longer than 10 lines of code.'
  StyleGuide: '#short-methods'
  Enabled: true
  CountComments: false  # count full line comments?
  Max: 15
  ExcludedMethods:
    - run

################################################################################
# RSpec ########################################################################
################################################################################

RSpec/AggregateExamples:
  Enabled: true
  Include:
    - spec/**/*_spec.rb

RSpec/ExampleLength:
  Enabled: false

RSpec/InstanceVariable:
  Description: Checks for instance variable usage in specs.
  AssignmentOnly: true
  Enabled: true

################################################################################
# Style ########################################################################
################################################################################

Style/AsciiComments:
  AllowedChars:
    - á
    - à
    - ã
    - é
    - ó
    - õ
    - ç

# Checks if usage of `%()` or `%Q()` matches configuration.
Style/BarePercentLiterals:
  EnforcedStyle: bare_percent
  SupportedStyles:
    - percent_q
    - bare_percent

Style/ClassAndModuleChildren:
  # Checks the style of children definitions at classes and modules.
  #
  # Basically there are two different styles:
  #
  # `nested` - have each child on a separate line
  #   class Foo
  #     class Bar
  #     end
  #   end
  #
  # `compact` - combine definitions as much as possible
  #   class Foo::Bar
  #   end
  #
  # The compact style is only forced, for classes or modules with one child.
  EnforcedStyle: compact
  SupportedStyles:
    - nested
    - compact

Style/Documentation:
  Description: Document classes and non-namespace modules.
  Enabled: false
  VersionAdded: '0.9'
  Exclude:
    - spec/**/*
    - test/**/*

Style/ExponentialNotation:
  Enabled: true

Style/FrozenStringLiteralComment:
  EnforcedStyle: always
  SupportedStyles:
    # `when_needed` will add the frozen string literal comment to files
    # only when the `TargetRubyVersion` is set to 2.3+.
    - when_needed
    # `always` will always add the frozen string literal comment to a file
    # regardless of the Ruby version or if `freeze` or `<<` are called on a
    # string literal. If you run code against multiple versions of Ruby, it is
    # possible that this will create errors in Ruby 2.3.0+.
    - always
    # `never` will enforce that the frozen string literal comment does not
    # exist in a file.
    - never
  Exclude:
    - spec/**/*_spec.rb
    - spec/factories/**/*.rb

Style/HashEachMethods:
  Enabled: true

Style/HashTransformKeys:
  Enabled: true

Style/HashTransformValues:
  Enabled: true

Style/Lambda:
  Description: 'Use the new lambda literal syntax for single-line blocks.'
  StyleGuide: '#lambda-multi-line'
  Enabled: true
  EnforcedStyle: literal
  SupportedStyles:
    - line_count_dependent
    - lambda
    - literal

Style/PercentLiteralDelimiters:
  # Specify the default preferred delimiter for all types with the 'default' key
  # Override individual delimiters (even with default specified) by specifying
  # an individual key
  PreferredDelimiters:
    default: ()
    '%i': '[]'
    '%I': '[]'
    '%r': '{}'
    '%w': '()'
    '%W': '()'

Style/RegexpLiteral:
  Description: 'Use / or %r around regular expressions.'
  Enabled: true
  EnforcedStyle: slashes
  # slashes: Always use slashes.
  # percent_r: Always use `%r`.
  # mixed: Use slashes on single-line regexes, and `%r` on multi-line regexes.
  SupportedStyles:
    - slashes
    - percent_r
    - mixed
  # If `false`, the cop will always recommend using `%r` if one or more slashes
  # are found in the regexp string.
  AllowInnerSlashes: false

# =============================================================================
# RSpec/Rubocop

RSpec/LetSetup:
  Enabled: false

RSpec/NestedGroups:
  Max: 10
